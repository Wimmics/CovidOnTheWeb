# Mapping file generating the annotations for the named entities found by entity-fishing.
#
# Author: Franck MICHEL, University Cote d'Azur, CNRS, Inria
#
# Licensed under the Apache License, Version 2.0 (http://www.apache.org/licenses/LICENSE-2.0)

@prefix xrr:    <http://i3s.unice.fr/xr2rml#> .
@prefix rr:     <http://www.w3.org/ns/r2rml#> .
@prefix rml:    <http://semweb.mmlab.be/ns/rml#> .

@prefix rdf:    <http://www.w3.org/1999/02/22-rdf-syntax-ns#>.
@prefix rdfs:   <http://www.w3.org/2000/01/rdf-schema#>.
@prefix owl:    <http://www.w3.org/2002/07/owl#>.
@prefix xsd:    <http://www.w3.org/2001/XMLSchema#> .

@prefix bibo:   <http://purl.org/ontology/bibo/> .
@prefix dce:    <http://purl.org/dc/elements/1.1/>.
@prefix dct:    <http://purl.org/dc/terms/>.
@prefix fabio:  <http://purl.org/spar/fabio/> .
@prefix foaf:   <http://xmlns.com/foaf/0.1/>.
@prefix frbr:   <http://purl.org/vocab/frbr/core#>.
@prefix oa:     <http://www.w3.org/ns/oa#>.
@prefix prov:   <http://www.w3.org/ns/prov#>.
@prefix schema: <http://schema.org/>.
@prefix wd:     <http://www.wikidata.org/entity/>.

@prefix covid:  <http://ns.inria.fr/covid19/>.
@prefix covidpr:<http://ns.inria.fr/covid19/property/>.

# Template file: replace placeholders
# - {{dataset}}: RDF dataset name e.g. "dataset-1-0"
# - {{collection}}: the MongoDB collection to query, e.g. entityfishing
# - {{articlepart}}: article part about which to produce annotations. One of title, abstract, body_text

<#LS_entities>
    a               xrr:LogicalSource;
    xrr:query       """db.{{collection}}.find( {} )""";
    rml:iterator    "$.{{articlepart}}.entities.*";
    xrr:pushDown    [ xrr:reference "$.paper_id"; xrr:as "paper_id" ].

<#TM_annotation>
    a               rr:TriplesMap;
    xrr:logicalSource <#LS_entities>;
    rr:subjectMap   [
        rr:termType     rr:BlankNode;
        # Template to yield a unique blank node id for each annotation
        rr:template     "{$.paper_id}_{{articlepart}}_{$.rawName}_{$.offsetStart}_{$.offsetEnd}";
        rr:class        oa:Annotation, prov:Entity;
    ];
    rr:predicateObjectMap [
        rr:predicate rdfs:isDefinedBy;
        rr:objectMap [ rr:constant covid:{{dataset}}; rr:termType rr:IRI ];
    ];
    rr:predicateObjectMap [
        rr:predicate rdfs:label;
        rr:objectMap [ rr:template "named entity '{$.rawName}'"; rr:termType rr:Literal ];
    ];
    rr:predicateObjectMap [
        rr:predicate dct:creator;
        rr:objectMap [ rr:constant "https://team.inria.fr/wimmics/"; rr:termType rr:IRI ];
    ];
    rr:predicateObjectMap [
        rr:predicate schema:about;
        rr:objectMap [ rr:template "http://ns.inria.fr/covid19/{$.paper_id}" ];
    ];
    rr:predicateObjectMap [
        rr:predicate dct:subject;
        rr:objectMap [ xrr:reference "$.domains.*" ];
    ];

    # Annotation target
    rr:predicateObjectMap [
        rr:predicate oa:hasTarget;
        rr:objectMap [
            rr:template "{$.paper_id}_{{articlepart}}_target_{$.rawName}_{$.offsetStart}_{$.offsetEnd}";
            rr:termType rr:BlankNode;
        ];
    ];

    # Annotation body
    rr:predicateObjectMap [
        rr:predicate oa:hasBody;
        rr:objectMap [ rr:template "http://www.wikidata.org/entity/{$.wikidataId}" ];
    ];

    # Annotation confidence
    rr:predicateObjectMap [
        rr:predicate covidpr:confidence;
        rr:objectMap [ xrr:reference "$.nerd_score"; rr:datatype xsd:decimal ];
    ];

    # Provenance
    rr:predicateObjectMap [
        rr:predicate prov:wasGeneratedBy;
        rr:objectMap [ rr:constant covid:ProvenanceEF; rr:termType rr:IRI ];
    ];
    .

# Annotation target
<#TM_target>
    a rr:TriplesMap;
    xrr:logicalSource <#LS_entities>;
    rr:subjectMap [
        rr:termType rr:BlankNode;
        rr:template "{$.paper_id}_{{articlepart}}_target_{$.rawName}_{$.offsetStart}_{$.offsetEnd}"
    ];
    rr:predicateObjectMap [
        rr:predicate oa:hasSource;
        rr:objectMap [ rr:template "http://ns.inria.fr/covid19/{$.paper_id}#{{articlepart}}" ];
    ];
    rr:predicateObjectMap [
        rr:predicate oa:hasSelector;
        rr:objectMap [
            rr:template "{$.paper_id}_{{articlepart}}_selector_{$.rawName}_{$.offsetStart}_{$.offsetEnd}";
            rr:termType rr:BlankNode;
        ];
    ].

# Annotation target selector
<#TM_selector>
    a rr:TriplesMap;
    xrr:logicalSource <#LS_entities>;
    rr:subjectMap [
        rr:termType rr:BlankNode;
        rr:template "{$.paper_id}_{{articlepart}}_selector_{$.rawName}_{$.offsetStart}_{$.offsetEnd}";
        rr:class oa:TextPositionSelector, oa:TextQuoteSelector;
    ];
    rr:predicateObjectMap [
        rr:predicate oa:start;
        rr:objectMap [ xrr:reference "$.offsetStart"; rr:datatype xsd:integer ];
    ];
    rr:predicateObjectMap [
        rr:predicate oa:end;
        rr:objectMap [ xrr:reference "$.offsetEnd"; rr:datatype xsd:integer ];
    ];
    rr:predicateObjectMap [
        rr:predicate oa:exact;
        rr:objectMap [ xrr:reference "$.rawName" ];
    ];
    .

# -------------------------------------------------------------------------------

# Add global categories (dct:subject) to the article part (title, abstract or body_text

<#LS_global_categories>
    a               xrr:LogicalSource;
    xrr:query       """db.{{collection}}.find( {} )""";
    rml:iterator    "$.{{articlepart}}.global_categories.*";
    xrr:pushDown    [ xrr:reference "$.paper_id"; xrr:as "paper_id" ].

<#TM_global_categories>
    a               rr:TriplesMap;
    xrr:logicalSource <#LS_global_categories>;
    rr:subjectMap   [
        rr:template "http://ns.inria.fr/covid19/{$.paper_id}#{{articlepart}}";
    ];
    rr:predicateObjectMap [
        rr:predicate dct:subject;
        rr:objectMap [ xrr:reference "$.category" ];
    ];
    .
